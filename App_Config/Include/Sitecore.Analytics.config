<?xml version="1.0" encoding="utf-8" ?>
<configuration xmlns:role="http://www.sitecore.net/xmlconfig/role/" xmlns:patch="http://www.sitecore.net/xmlconfig/" xmlns:set="http://www.sitecore.net/xmlconfig/set/">
  <sitecore role:require="Standalone OR ContentDelivery OR ContentManagement OR Processing OR Reporting">
    
    <settings>
      <!--  ANALYTICS CONTACT MAXIMUM INTERACTIONS 
            Maximum number of interactions in contact history that can be loaded
            by personalization components on website pages.
            Default: 25
      -->
      <setting name="Analytics.ContactHistory.MaxInteractions" value="25" />

      <!--  ANALYTICS EMAIL FROM ADDRESS
            Specifies the From address in emails that contain reports.
            Default: <none>
      -->
      <setting name="Analytics.EMailFromAddress" value="" />

      <!--  ANALYTICS GEOIPS CACHESIZE
            Determines the number of cached items in the GeoIp Lookup Manager.
            Default: 1000
      -->
      <setting name="Analytics.GeoIps.CacheSize" value="1000" />

      <!--  ANALYTICS LOG LEVEL
            Determines which level of log errors are also logged in Analytics.
            Possible values are: None, Debug, Information, Warning, Error, and Fatal.
            Default: Error
      -->
      <setting name="Analytics.LogLevel" value="Error" />

      <!--  ANALYTICS - MAX ACCEPTED CLOCK DEVIATION
            Defines the largest acceptable deviation between the current server's system time and the system time
            of other Sitecore servers in the same environment.
            The system uses this setting to compensate for any system time deviation between servers.
            Default: 0.00:00:10
      -->
      <setting name="Analytics.MaxAcceptedClockDeviation" value="0.00:00:10" />

      <!--  ANALYTICS PATTERNS MINIMAL PROFILE SCORE COUNT
            Specifies the minimum number of content items with profile values that must be requested before Sitecore
            maps the contact's accumulated score to a pattern card.
            Default: 3
      -->
      <setting name="Analytics.Patterns.MinimalProfileScoreCount" value="3" />

      <!--  ANALYTICS PERFORM LOOKUP
            Determines if this server performs the lookups (DNS and URLs).
            Default: true
      -->
      <setting name="Analytics.PerformLookup" value="true" />

      <!--  ANALYTICS - REDACT IP ADDRESS
            Determines if the IP addresses that initiated the interaction are redacted when writing to the database.
            Note: IP addresses are hashed by default. Setting this value to true removes your ability to determine the actual IP address that initiated the interaction.
            When the setting is enabled, the database stores an empty IP address (0.0.0.0) instead of the actual IP address.
            Default value: false
      -->
      <setting name="Analytics.RedactIpAddress" value="false" />


      <!--  ANALYTICS - REPORTS - DISPLAY DATES IN UTC
            Specifies whether dates and times are displayed in UTC or the local server time zone in the Engagement Analytics reports and in the Executive Dashboard.
            If true, dates and times are displayed in UTC in reports.
            Default: false
      -->
      <setting name="Analytics.Reports.DisplayDatesInUtc" value="false" />

      <!--  MAXMIND FORMAT
            Format of the return value from MaxMind
            Default: "Country,Region,City,PostalCode,Latitude,Longitude,MetroCode,AreaCode,Isp,Owner,Error"
      -->
      <setting name="MaxMind.Format" value="Country,Region,City,PostalCode,Latitude,Longitude,MetroCode,AreaCode,Isp,Owner,Error" />
      
      <!--  MAXMIND SECURITY TOKEN
            Security token from MaxMind.
            Default: "00000000"
      -->
      <setting name="MaxMind.SecurityToken" value="00000000" />

      <!--  MAXMIND URL
            The URL of the MaxMind web service.
            Default: http://sitecore1.maxmind.com/app/sc?i={0}&amp;l={1}
      -->
      <setting name="MaxMind.Url" value="http://sitecore1.maxmind.com/app/sc?i={0}&amp;l={1}" />
      
      <!--  WEBEDIT PAGE DAILY VISITS CACHE EXPIRATION
            Sets the absolute expiration on the cached daily visits data in Page Editor.
            Makes sense only when analytics is enabled.            
            Default value: 1.00:00:00 (1 day)
      -->
      <setting name="WebEdit.PageDailyVisitsCacheExpiration" value="1.00:00:00" />
    
      <!--  WEBEDIT TEST STATISTICS CACHE EXPIRATION
              Sets the absolute expiration on the cached test statistics data in Page Editor.
              Makes sense only when analytics is enabled.            
              Default value: 01:00:00 (1 hour)
        -->
      <setting name="WebEdit.TestStatisticsCacheExpiration" value="01:00:00" />
      
      <!--  ANALYTICS ITEMRECORDS ID CACHE SIZE
              Sets the size of the cache, which stores analytics definition IDs by name.
              Default value: 10MB
      -->
      <setting name="Analytics.ItemRecordsIDCache.Size" value="10MB" /> 
    </settings>

    <interactionRegistry type="Sitecore.Analytics.Tracking.External.InteractionRegistry, Sitecore.Analytics" singleInstance="true">
      <EnableProfiling>True</EnableProfiling>
    </interactionRegistry>

    <commands>
      <command name="analytics:authoringfeedback" type="Sitecore.Shell.Applications.Analytics.AuthoringFeedback.AuthoringFeedback,Sitecore.Xdb.Client"/>
      <command name="analytics:emailreport" type="Sitecore.Shell.Applications.Analytics.ReportRunner.EmailReport,Sitecore.Xdb.Client"/>
      <command name="analytics:opengoals" type="Sitecore.Shell.Applications.Analytics.TrackingField.OpenGoals,Sitecore.Xdb.Client"/>
      <command name="analytics:opentrackingfield" type="Sitecore.Shell.Applications.Analytics.TrackingField.OpenTrackingField,Sitecore.Xdb.Client"/>
      <command name="analytics:reports" type="Sitecore.Shell.Applications.Analytics.ReportRunner.OpenAnalyticsReports,Sitecore.Xdb.Client"/>
      <command name="analytics:status" type="Sitecore.Shell.Applications.Analytics.Status.Status,Sitecore.Xdb.Client"/>
      <command name="analytics:viewtrackingdetails" type="Sitecore.Shell.Applications.Analytics.TrackingField.ViewTrackingDetails,Sitecore.Xdb.Client"/>
      <command name="item:personalizeprofile" type="Sitecore.Shell.Framework.Commands.SetProfileValue,Sitecore.Kernel" />
      <command name="marketingtaxonomy:deploy" type="Sitecore.Shell.Applications.Analytics.Reporting.Taxonomies.Deploy, Sitecore.Xdb.Client" />
      <command name="dashboard:opensinglecampaign" type="Sitecore.Shell.Framework.Commands.Dashboard.OpenSingleCampaign,Sitecore.Xdb.Client" />
      <command name="device:settestdetails" type="Sitecore.Analytics.Shell.Applications.Layouts.DeviceSetTestDetails, Sitecore.Analytics" />
    </commands>

    <contactRepository type="Sitecore.Analytics.Data.ContactRepository, Sitecore.Analytics" singleInstance="true" />

    <behaviorProfileConverter type="Sitecore.Analytics.Data.BehaviorProfileConverter, Sitecore.Analytics" singleInstance="false" />

    <dataAdapterManager defaultProvider="mongo">
      <providers>
        <clear/>
        <add name="mongo" type="Sitecore.Analytics.Data.DataAccess.MongoDb.MongoDbDataAdapterProvider, Sitecore.Analytics.MongoDb" connectionStringName="analytics"/>
      </providers>
    </dataAdapterManager>

    <events>
      <event name="item:saved">
        <handler type="Sitecore.Analytics.Data.Items.ItemEventHandler, Sitecore.Analytics" method="OnItemSaved"/>
      </event>
      <event name="publish:end">
        <handler type="Sitecore.Analytics.Data.Items.ClearItemRecordsIDCacheOnPublishEndHandler, Sitecore.Analytics" method="ClearCache" />
      </event>
      <event name="publish:end:remote">
        <handler type="Sitecore.Analytics.Data.Items.ClearItemRecordsIDCacheOnPublishEndHandler, Sitecore.Analytics" method="ClearCache" />
      </event>
    </events>

    <maintenanceService type="Sitecore.Analytics.Core.MaintenanceAgent, Sitecore.Analytics.Core">
      <Services hint="list:RegisterService" />
    </maintenanceService>

    <!-- Core Services Subsystem -->
    <coreServices type="Sitecore.Analytics.Core.Subsystem" singleInstance="true">
      <BackgroundServices hint="list:Add">
        <maintenance type="Sitecore.Analytics.Core.BackgroundService">
          <param desc="agentName">maintenanceService</param>
          <Interval>0.00:01:00</Interval>
          <MaxThreads>1</MaxThreads>
        </maintenance>
      </BackgroundServices>
    </coreServices>

    <hooks>
      <hook type="Sitecore.Analytics.ConfigLoader, Sitecore.Analytics" />
      <hook type="Sitecore.Analytics.BackgroundServiceLoader, Sitecore.Analytics" />
      <hook type="Sitecore.Analytics.Core.SubsystemLoader, Sitecore.Analytics.Core">
        <Name>Core Services</Name>
        <Subsystem ref="coreServices" />
      </hook>
    </hooks>

    <lookupManager defaultProvider="default">
      <providers>
        <clear/>
        <add name="default" type="Sitecore.Analytics.Lookups.MaxMindProvider,Sitecore.Analytics"/>
      </providers>
    </lookupManager>

    <geoIpManager defaultProvider="default">
      <providers>
        <clear/>

        <!--  SALT 
              Salt attribute - a string that is added to the IP address when it is hashed.  
              For security reasons, we recommended that the salt contains at least 6 characters.
        -->
        <add name="default" salt="f54RYb4RT4ylUn" type="Sitecore.Analytics.Lookups.IpHashProvider, Sitecore.Analytics"/>
      </providers>
    </geoIpManager>

    <pipelines>
      <classificationStrategy>
        <processor type="Sitecore.Analytics.Pipelines.ClassificationStrategy.OverrideClassification, Sitecore.Analytics"/>
        <processor type="Sitecore.Analytics.Pipelines.ClassificationStrategy.LocationsClassifications, Sitecore.Analytics"/>
        <processor type="Sitecore.Analytics.Pipelines.ClassificationStrategy.UserAgentsClassifications, Sitecore.Analytics"/>
        <processor type="Sitecore.Analytics.Pipelines.ClassificationStrategy.GeoIpClassification, Sitecore.Analytics"/>
        <processor type="Sitecore.Analytics.Pipelines.ClassificationStrategy.ContactClassifications, Sitecore.Analytics"/>
      </classificationStrategy>

      <createItemChangeTest>
        <processor type="Sitecore.Analytics.Pipelines.CreateItemChangeTest.PageVersionTest,Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.CreateItemChangeTest.MvTest,Sitecore.Analytics" />
      </createItemChangeTest>

      <deployDefinition>
        <processor type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.Deployment.Processors.Deploy, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.DeployDefinition.SavePageEvent,Sitecore.Analytics"/>
        <processor type="Sitecore.Analytics.Pipelines.DeployDefinition.SaveCampaign,Sitecore.Analytics"/>
        <processor type="Sitecore.Analytics.Pipelines.DeployDefinition.SaveTrafficType,Sitecore.Analytics"/>
        <processor type="Sitecore.Analytics.Pipelines.DeployDefinition.SaveVisitorClassification,Sitecore.Analytics" />
      </deployDefinition>

      <findVisitorEmailAddress>
        <processor type="Sitecore.Analytics.Pipelines.FindVisitorEmailAddress.FindContactEmailAddress, Sitecore.Analytics" method="FindEmailInUserName" patch:before="processor[@type='Sitecore.Pipelines.GetVisitorEmailAddress.FindContactEmailAddress, Sitecore.Kernel']"/>
        <processor type="Sitecore.Analytics.Pipelines.FindVisitorEmailAddress.FindContactEmailAddress, Sitecore.Analytics" method="FindEmailInTags" patch:after="processor[@type='Sitecore.Pipelines.GetVisitorEmailAddress.FindContactEmailAddress, Sitecore.Kernel']"/>
      </findVisitorEmailAddress>

      <getContentEditorWarnings>
        <processor type="Sitecore.Analytics.Pipelines.GetContentEditorWarnings.MissingMarketingProfiles, Sitecore.Analytics" />
      </getContentEditorWarnings>

      <getDictionaryDataStorage>
        <processor type="Sitecore.Analytics.Data.Dictionaries.DictionaryData.Xdb.GetDictionaryDataProcessor, Sitecore.Analytics" />
      </getDictionaryDataStorage>

      <getRenderingRules>
        <processor type="Sitecore.Analytics.Pipelines.GetRenderingRules.FromRendering, Sitecore.Analytics"/>
        <processor type="Sitecore.Analytics.Pipelines.GetRenderingRules.FilterForEditing, Sitecore.Analytics"/>
      </getRenderingRules>

      <getItemPersonalizationVisibility>
        <processor type="Sitecore.Analytics.Pipelines.GetItemPersonalizationVisibility.CheckUserSettings, Sitecore.Analytics"/>
        <processor type="Sitecore.Analytics.Pipelines.GetItemPersonalizationVisibility.CheckSectionAvailability, Sitecore.Analytics"/>
      </getItemPersonalizationVisibility>

      <httpRequestBegin>
        <processor type="Sitecore.Analytics.Pipelines.HttpRequest.StartDiagnostics,Sitecore.Analytics" patch:after="processor[@type='Sitecore.Pipelines.HttpRequest.StartMeasurements, Sitecore.Kernel']" />
      </httpRequestBegin>

      <initializeExternalSession>
        <processor type="Sitecore.Analytics.Pipelines.InitializeExternalSession.CreateStandardSession, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.InitializeExternalSession.EnsureDevice, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.InitializeExternalSession.EnsureContact, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.InitializeExternalSession.LoadKeyBehaviorCache, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.InitializeExternalSession.EnsureInteraction, Sitecore.Analytics" />
      </initializeExternalSession>

      <insertRenderings>
        <processor type="Sitecore.Analytics.Pipelines.InsertRenderings.Personalization, Sitecore.Analytics" patch:after="processor[@type='Sitecore.Pipelines.InsertRenderings.Processors.EvaluateConditions, Sitecore.Kernel']"/>
      </insertRenderings>

      <initializeInteractionProfile>
        <processor type="Sitecore.Analytics.Pipelines.InitializeInteractionProfile.ResetProfiles, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.InitializeInteractionProfile.CopyProfiles, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.InitializeInteractionProfile.ApplyDecay, Sitecore.Analytics" />
      </initializeInteractionProfile>

      <updateContactBehaviorProfile>
        <processor type="Sitecore.Analytics.Pipelines.UpdateContactBehaviorProfile.CopyProfiles, Sitecore.Analytics" />
      </updateContactBehaviorProfile>

      <mergeContacts>
        <processor type="Sitecore.Analytics.Pipelines.MergeContacts.MergeTags, Sitecore.Analytics"/>
        <processor type="Sitecore.Analytics.Pipelines.MergeContacts.MergeContactCounters, Sitecore.Analytics"/>
        <processor type="Sitecore.Analytics.Pipelines.MergeContacts.MergeContactAttributes, Sitecore.Analytics"/>
        <processor type="Sitecore.Analytics.Pipelines.MergeContacts.MergeContactBehaviorProfile, Sitecore.Analytics"/>
        <processor type="Sitecore.Analytics.Pipelines.MergeContacts.MergeContactFacets, Sitecore.Analytics"/>
        <processor type="Sitecore.Analytics.Pipelines.MergeContacts.MergeKeyBehaviorCaches, Sitecore.Analytics"/>
      </mergeContacts>

      <rebuildKeyBehaviorCache>
        <processor type="Sitecore.Analytics.Pipelines.RebuildKeyBehaviorCache.CheckPreconditions, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.RebuildKeyBehaviorCache.ReadInteractionsFromHistory, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.RebuildKeyBehaviorCache.UpdateKeyBehaviorCacheForAllRelatedInteractions, Sitecore.Analytics" />
      </rebuildKeyBehaviorCache>

      <parseReferrer>
        <processor type="Sitecore.Analytics.Pipelines.ParseReferrer.ParseGenericSearchEngine,Sitecore.Analytics">
          <engines hint="raw:AddHostParameterName">
            <engine hostname="www.google" parametername="q"/>
            <engine hostname="search.yahoo" parametername="p"/>
            <engine hostname="www.bing" parametername="q"/>
            <engine hostname="search.lycos" parametername="query"/>
            <engine hostname="www.baidu" parametername="wd"/>
          </engines>
        </processor>
      </parseReferrer>

      <postContactObsoletion>
      </postContactObsoletion>

      <processItem>
        <processor type="Sitecore.Analytics.Pipelines.ProcessItem.CollectParameters,Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.ProcessItem.TriggerCampaigns,Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.ProcessItem.RegisterPageEvents,Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.ProcessItem.ProcessProfiles, Sitecore.Analytics" />
      </processItem>

      <beforeRecordTouchPoint>
        <processor type="Sitecore.Analytics.Pipelines.BeforeRecordTouchPoint.StartTracking, Sitecore.Analytics" />
      </beforeRecordTouchPoint>

      <recordTouchPoint>
        <processor type="Sitecore.Analytics.Pipelines.RecordTouchPoint.CreatePage, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.RecordTouchPoint.RunSessionBeginRules, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.RecordTouchPoint.TriggerCampaigns, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.RecordTouchPoint.RegisterEvents, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.RecordTouchPoint.ProcessItem, Sitecore.Analytics" />
      </recordTouchPoint>

      <renderContentEditorHeader>
        <processor type="Sitecore.Shell.Applications.ContentEditor.Pipelines.RenderContentEditorHeader.AddProfileCards, Sitecore.Xdb.Client" patch:after="processor[@type='Sitecore.Shell.Applications.ContentEditor.Pipelines.RenderContentEditorHeader.AddTitle, Sitecore.Client']"/>
      </renderContentEditorHeader>

      <renderingRuleEvaluated>
      </renderingRuleEvaluated>

      <afterRecordTouchPoint>
        <processor type="Sitecore.Analytics.Pipelines.AfterRecordTouchPoint.EndTracking, Sitecore.Analytics" />
      </afterRecordTouchPoint>

      <group groupName="analytics.bulk.contact">
        <pipelines>

          <updateFields>
          </updateFields>

          <beforePersist>
          </beforePersist>

          <afterPersist>
          </afterPersist>

        </pipelines>
      </group>

      <sessionEnd>
        <processor type="Sitecore.Analytics.Pipelines.SessionEnd.RaiseVisitEnd,Sitecore.Analytics"/>
      </sessionEnd>

      <submitContact>
      </submitContact>

      <trafficTypes>
        <processor type="Sitecore.Analytics.Pipelines.TrafficTypes.Initialize,Sitecore.Analytics"/>
        <processor type="Sitecore.Analytics.Pipelines.TrafficTypes.ReferringSite,Sitecore.Analytics"/>
        <processor type="Sitecore.Analytics.Pipelines.TrafficTypes.SearchKeywords,Sitecore.Analytics"/>
        <processor type="Sitecore.Analytics.Pipelines.TrafficTypes.OrganicBranded,Sitecore.Analytics"/>
      </trafficTypes>

      <triggerCampaign>
        <processor type="Sitecore.Analytics.Pipelines.TriggerCampaign.CheckPreconditions,Sitecore.Analytics"/>
        <processor type="Sitecore.Analytics.Pipelines.TriggerCampaign.HandleTrafficType,Sitecore.Analytics"/>
        <processor type="Sitecore.Analytics.Pipelines.TriggerCampaign.RunRules,Sitecore.Analytics"/>
        <processor type="Sitecore.Analytics.Pipelines.TriggerCampaign.RegisterPageEvent,Sitecore.Analytics"/>
      </triggerCampaign>

      <visitEnd>
        <processor type="Sitecore.Analytics.Pipelines.VisitEnd.RunRules,Sitecore.Analytics"/>
      </visitEnd>

      <updateClassifications>
        <processor type="Sitecore.Analytics.Pipelines.UpdateClassification.NormalizeRequest, Sitecore.Analytics"/>
        <processor type="Sitecore.Analytics.Pipelines.UpdateClassification.UpdateCollectionData, Sitecore.Analytics">
            <ContactLockTimeout>0.00:00:03</ContactLockTimeout>
            <ContactRepository  ref="contactRepository" />
        </processor>
        <processor type="Sitecore.Analytics.Aggregation.Pipelines.UpdateClassification.UpdateReportingDimensions, Sitecore.Analytics.Aggregation"/>
        <processor type="Sitecore.Analytics.Pipelines.UpdateClassification.ScheduleUpdatingDependantClassifications, Sitecore.Analytics">
          <Worker type="Sitecore.Analytics.Pipelines.UpdateClassification.DefaultUpdateClassificationsWorker,Sitecore.Analytics" />
          <TaskManager ref="processing/taskManager" />
        </processor>
        
      </updateClassifications>

      <updateContactClassifications>
        <processor type="Sitecore.Analytics.Pipelines.UpdateContactClassification.UpdateXdbClassificationsProcessor,Sitecore.Analytics">
            <ContactLockTimeout>0.00:00:03</ContactLockTimeout>
            <ContactRepository  ref="contactRepository" />
        </processor>
        <processor type="Sitecore.Analytics.Pipelines.UpdateContactClassification.UpdateRdbClassificationProcessor,Sitecore.Analytics"/>
      </updateContactClassifications>

      <updateKeyBehaviorCache>
        <processor type="Sitecore.Analytics.Pipelines.UpdateKeyBehaviorCache.CheckPreconditions, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.UpdateKeyBehaviorCache.UpdateCampaignsModelData, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.UpdateKeyBehaviorCache.UpdateGoalsModelData, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.UpdateKeyBehaviorCache.UpdatePageEventsModelData, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.UpdateKeyBehaviorCache.UpdateChannelsModelData, Sitecore.Analytics" />
        <processor type="Sitecore.Analytics.Pipelines.UpdateKeyBehaviorCache.UpdateVenuesModelData, Sitecore.Analytics" />
      </updateKeyBehaviorCache>

      <reconcileRdbClassifications>
        <processor type="Sitecore.Analytics.Aggregation.Pipelines.ReconcileRdbClassifications.UpdateLocationDimension, Sitecore.Analytics.Aggregation"/>
        <processor type="Sitecore.Analytics.Aggregation.Pipelines.ReconcileRdbClassifications.UpdateContactDimension, Sitecore.Analytics.Aggregation"/>
        <processor type="Sitecore.Analytics.Aggregation.Pipelines.ReconcileRdbClassifications.SaveDimensions, Sitecore.Analytics.Aggregation">
          <ReportingTargets hint="list:AddReportingTarget">
            <primary ref="aggregation/reportingStorageProviders/primary" />
          </ReportingTargets>
        </processor>
      </reconcileRdbClassifications>

      <group name="marketingDefinitions" groupName="marketingDefinitions">
        <pipelines>
          <deleteFunnel>
            <processor type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.Pipelines.DeleteDefinition.RemoveFromRepository`1[[Sitecore.Marketing.Definitions.Funnels.Data.FunnelDefinitionRecord, Sitecore.Marketing]], Sitecore.Analytics">
              <param desc="repository" ref="marketingDefinitions/funnel/repositories/$(marketingDefinitions.deploymentManager.targetRepository)" />
            </processor>
          </deleteFunnel>
          <deleteCampaign>
            <processor type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.Pipelines.DeleteDefinition.RemoveFromRepository`1[[Sitecore.Marketing.Definitions.Campaigns.Data.CampaignActivityDefinitionRecord, Sitecore.Marketing]], Sitecore.Analytics">
              <param desc="repository" ref="marketingDefinitions/campaign/repositories/$(marketingDefinitions.deploymentManager.targetRepository)" />
            </processor>
          </deleteCampaign>
          <deleteteGoal>
            <processor type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.Pipelines.DeleteDefinition.RemoveFromRepository`1[[Sitecore.Marketing.Definitions.Goals.Data.GoalDefinitionRecord, Sitecore.Marketing]], Sitecore.Analytics">
              <param desc="repository" ref="marketingDefinitions/goal/repositories/$(marketingDefinitions.deploymentManager.targetRepository)" />
            </processor>
          </deleteteGoal>
          <deleteOutcome>
            <processor type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.Pipelines.DeleteDefinition.RemoveFromRepository`1[[Sitecore.Marketing.Definitions.Outcomes.Data.OutcomeDefinitionRecord, Sitecore.Marketing]], Sitecore.Analytics">
              <param desc="repository" ref="marketingDefinitions/outcome/repositories/$(marketingDefinitions.deploymentManager.targetRepository)" />
            </processor>
          </deleteOutcome>
        </pipelines>
      </group>
    </pipelines>

    <scheduling>
      <agent type="Sitecore.Analytics.Tasks.EmailReportsTask, Sitecore.Analytics" method="Run" interval="1:00:00">
        <DatabaseName>master</DatabaseName>
      </agent>
    </scheduling>

    <marketingDefinitions>
      <sc.variable name="marketingDefinitions.deploymentManager.targetRepository" value="rdb" />
      <deploymentManagerTargetRepository>rdb</deploymentManagerTargetRepository>
      <rdbCacheSize>20MB</rdbCacheSize>
      <rdbCacheExpirationInSeconds>10</rdbCacheExpirationInSeconds>
      <deploymentManager type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.Deployment.DeploymentManager, Sitecore.Analytics" singleInstance="true">
        <!-- 
        specifies which of the repositories for the definition is used to deploy from this server i.e. rdb, remote. 
        When using remote repositories, configure marketingDefinitions/httpTransportFactory -->
        <param desc="targetRepository" ref="marketingDefinitions/deploymentManagerTargetRepository" />
      </deploymentManager>
      <campaign definitionInterface="Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing">
       <definitionManager type="Sitecore.Marketing.Definitions.Campaigns.CampaignDefinitionManager, Sitecore.Marketing" singleInstance="true">
         <config>
           <activationFeed>
             <observer type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.Observers.SaveDefinitionToRepositoryObserver`1[[Sitecore.Marketing.Definitions.Campaigns.ICampaignActivityDefinition, Sitecore.Marketing]], Sitecore.Analytics">
               <param desc="repositoryName" ref="marketingDefinitions/deploymentManagerTargetRepository" />
             </observer>
           </activationFeed>
         </config>
       </definitionManager>
       <repositories>
          <rdb type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.RdbCampaignDefinitionRepository, Sitecore.Analytics" singleInstance="true">
            <param desc="connectionStringName">reporting</param>
            <param desc="cache" type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.RdbCache.DefinitionCache`1[[Sitecore.Marketing.Definitions.Campaigns.Data.CampaignActivityDefinitionRecord, Sitecore.Marketing]], Sitecore.Analytics">
              <param desc="name">marketing.rdb.campaign</param>
              <param desc="maxSize" ref="marketingDefinitions/rdbCacheSize" />
              <param desc="expirationInSeconds" ref="marketingDefinitions/rdbCacheExpirationInSeconds" />
            </param>
            <param desc="availableCulturesCache" type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.RdbCache.Cache`2[[Sitecore.Data.ID, Sitecore.Kernel],[System.Collections.Generic.IReadOnlyList`1[[System.Globalization.CultureInfo]]]], Sitecore.Analytics">
              <param desc="name">marketing.rdb.campaign.cultures</param>
              <param desc="maxSize" ref="marketingDefinitions/rdbCacheSize" />
              <param desc="expirationInSeconds" ref="marketingDefinitions/rdbCacheExpirationInSeconds" />
            </param>
          </rdb>
        </repositories>
      </campaign>
      <funnel definitionInterface="Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing">
        <definitionManager type="Sitecore.Marketing.Definitions.Funnels.FunnelDefinitionManager, Sitecore.Marketing" singleInstance="true">
          <config>
            <activationFeed>
              <observer type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.Observers.SaveDefinitionToRepositoryObserver`1[[Sitecore.Marketing.Definitions.Funnels.IFunnelDefinition, Sitecore.Marketing]], Sitecore.Analytics">
                <param desc="repositoryName" ref="marketingDefinitions/deploymentManagerTargetRepository" />
              </observer>
            </activationFeed>
          </config>
        </definitionManager>
        <repositories>
          <rdb type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.RdbFunnelDefinitionRepository, Sitecore.Analytics" singleInstance="true">
            <param desc="connectionStringName">reporting</param>
            <param desc="cache" type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.RdbCache.DefinitionCache`1[[Sitecore.Marketing.Definitions.Funnels.Data.FunnelDefinitionRecord, Sitecore.Marketing]], Sitecore.Analytics">
              <param desc="name">marketing.rdb.funnel</param>
              <param desc="maxSize" ref="marketingDefinitions/rdbCacheSize" />
              <param desc="expirationInSeconds" ref="marketingDefinitions/rdbCacheExpirationInSeconds" />
            </param>
            <param desc="availableCulturesCache" type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.RdbCache.Cache`2[[Sitecore.Data.ID, Sitecore.Kernel],[System.Collections.Generic.IReadOnlyList`1[[System.Globalization.CultureInfo]]]], Sitecore.Analytics">
              <param desc="name">marketing.rdb.funnel.cultures</param>
              <param desc="maxSize" ref="marketingDefinitions/rdbCacheSize" />
              <param desc="expirationInSeconds" ref="marketingDefinitions/rdbCacheExpirationInSeconds" />
            </param>
          </rdb>
        </repositories>
      </funnel>
      <asset definitionInterface="Sitecore.Marketing.Definitions.MarketingAssets.IMarketingAssetDefinition, Sitecore.Marketing">
        <definitionManager type="Sitecore.Marketing.Definitions.MarketingAssets.MarketingAssetDefinitionManager, Sitecore.Marketing" singleInstance="true">
          <config>
            <activationFeed>
              <observer type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.Observers.SaveDefinitionToRepositoryObserver`1[[Sitecore.Marketing.Definitions.MarketingAssets.IMarketingAssetDefinition, Sitecore.Marketing]], Sitecore.Analytics">
                <param desc="repositoryName" ref="marketingDefinitions/deploymentManagerTargetRepository" />
              </observer>
            </activationFeed>
          </config>
        </definitionManager>
      </asset>
      <goal definitionInterface="Sitecore.Marketing.Definitions.Goals.IGoalDefinition, Sitecore.Marketing">
        <definitionManager type="Sitecore.Marketing.Definitions.Goals.GoalDefinitionManager, Sitecore.Marketing" singleInstance="true">
          <config>
            <activationFeed>
              <observer type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.Observers.SaveDefinitionToRepositoryObserver`1[[Sitecore.Marketing.Definitions.Goals.IGoalDefinition, Sitecore.Marketing]], Sitecore.Analytics">
                <param desc="repositoryName" ref="marketingDefinitions/deploymentManagerTargetRepository" />
              </observer>
            </activationFeed>
          </config>
        </definitionManager>
        <repositories>
          <rdb type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.GoalDefinitionRdbRepository, Sitecore.Analytics" singleInstance="true">
            <param desc="connectionStringName">reporting</param>
            <param desc="cache" type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.RdbCache.DefinitionCache`1[[Sitecore.Marketing.Definitions.Goals.Data.GoalDefinitionRecord, Sitecore.Marketing]], Sitecore.Analytics">
              <param desc="name">marketing.rdb.goal</param>
              <param desc="maxSize" ref="marketingDefinitions/rdbCacheSize" />
              <param desc="expirationInSeconds" ref="marketingDefinitions/rdbCacheExpirationInSeconds" />
            </param>
            <param desc="availableCulturesCache" type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.RdbCache.Cache`2[[Sitecore.Data.ID, Sitecore.Kernel],[System.Collections.Generic.IReadOnlyList`1[[System.Globalization.CultureInfo]]]], Sitecore.Analytics">
              <param desc="name">marketing.rdb.goal.cultures</param>
              <param desc="maxSize" ref="marketingDefinitions/rdbCacheSize" />
              <param desc="expirationInSeconds" ref="marketingDefinitions/rdbCacheExpirationInSeconds" />
            </param>
          </rdb>
        </repositories>
      </goal>
      <outcome definitionInterface="Sitecore.Marketing.Definitions.Outcomes.Model.IOutcomeDefinition, Sitecore.Marketing">
        <definitionManager type="Sitecore.Marketing.Definitions.Outcomes.OutcomeDefinitionManager, Sitecore.Marketing" singleInstance="true">
          <config>
            <activationFeed>
              <observer type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.Observers.SaveDefinitionToRepositoryObserver`1[[Sitecore.Marketing.Definitions.Outcomes.Model.IOutcomeDefinition, Sitecore.Marketing]], Sitecore.Analytics">
                <param desc="repositoryName" ref="marketingDefinitions/deploymentManagerTargetRepository" />
              </observer>
            </activationFeed>
          </config>
        </definitionManager>
        <repositories>
          <rdb type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.RdbOutcomeDefinitionRepository, Sitecore.Analytics" singleInstance="true">
            <param desc="connectionStringName">reporting</param>
            <param desc="cache" type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.RdbCache.DefinitionCache`1[[Sitecore.Marketing.Definitions.Outcomes.Data.OutcomeDefinitionRecord,Sitecore.Marketing]], Sitecore.Analytics">
              <param desc="name">marketing.rdb.outcome</param>
              <param desc="maxSize" ref="marketingDefinitions/rdbCacheSize" />
              <param desc="expirationInSeconds" ref="marketingDefinitions/rdbCacheExpirationInSeconds" />
            </param>
            <param desc="typeCache" type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.RdbCache.Cache`2[[Sitecore.Data.ID, Sitecore.Kernel],[Sitecore.Marketing.Definitions.Outcomes.Model.IOutcomeDefinitionType, Sitecore.Marketing]], Sitecore.Analytics">
              <param desc="name">marketing.rdb.outcome.type</param>
              <param desc="maxSize" ref="marketingDefinitions/rdbCacheSize" />
              <param desc="expirationInSeconds" ref="marketingDefinitions/rdbCacheExpirationInSeconds" />
            </param>
            <param desc="availableCulturesCache" type="Sitecore.Analytics.Reporting.DefinitionData.Marketing.RdbCache.Cache`2[[Sitecore.Data.ID, Sitecore.Kernel],[System.Collections.Generic.IReadOnlyList`1[[System.Globalization.CultureInfo]]]], Sitecore.Analytics">
              <param desc="name">marketing.rdb.outcome.cultures</param>
              <param desc="maxSize" ref="marketingDefinitions/rdbCacheSize" />
              <param desc="expirationInSeconds" ref="marketingDefinitions/rdbCacheExpirationInSeconds" />
            </param>
          </rdb>
        </repositories>
      </outcome>
    </marketingDefinitions>
    <taxonomy>
      <repositories>
        <rdbTaxonomyRepository type="Sitecore.Analytics.Reporting.DefinitionData.Taxonomy.RdbTaxonomyRepository, Sitecore.Analytics" singleInstance="true">
          <param desc="connectionStringName">reporting</param>
        </rdbTaxonomyRepository>
      </repositories>
      <deployManager type="Sitecore.Analytics.Reporting.DefinitionData.Taxonomy.Deployment.DeployManager, Sitecore.Analytics" singleInstance="true">
        <param desc="feed" type="Sitecore.Marketing.Core.ObservableFeed.RetryingObservableFeed`1[[Sitecore.Marketing.Taxonomy.Data.Entities.TaxonEntity,Sitecore.Marketing.Taxonomy]], Sitecore.Marketing.Core">
          <observers hint="list:AddObserver">
            <observer type="Sitecore.Analytics.Reporting.DefinitionData.Taxonomy.Observers.DeployTaxonObserver, Sitecore.Analytics">
              <param desc="handler" ref="taxonomy/deployHandler" />
            </observer>
          </observers>
        </param>
      </deployManager>
      <deployHandler ref="taxonomy/repositories/rdbTaxonomyRepository" />
    </taxonomy>

    <tracking>
      <!--This configuration node is obsolete and will be removed in a future version of Sitecore. Use "contactRepository" node to get access to Contact repository  -->
      <contactRepository ref="contactRepository" />
      
      <nullContactRepository type="Sitecore.Analytics.Data.ContactRepository, Sitecore.Analytics" singleInstance="true">
        <param desc="dataAdapterProvider" type="Sitecore.Analytics.DataAccess.Null.SealedNullDataAdapterProvider"/>
      </nullContactRepository>
    </tracking>

  </sitecore>
</configuration>
